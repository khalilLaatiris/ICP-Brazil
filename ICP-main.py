# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ICP-Brazil.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QMovie
import os
from datetime import datetime


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 357)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Downloads/macra.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 381, 279))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        # self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        
        # self.label.setMaximumSize(QtCore.QSize(60, 60))
        # self.label.setTextFormat(QtCore.Qt.AutoText)
        # self.label.setObjectName("label")
        # self.movie = QMovie('loading-buffering.gif')
        # self.label.setMovie(self.movie)
        # self.horizontalLayout_3.addWidget(self.label)
        self.file_name = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.file_name.setFont(font)
        self.file_name.setAlignment(QtCore.Qt.AlignCenter)
        self.file_name.setObjectName("file_name")
        self.horizontalLayout_3.addWidget(self.file_name)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_time = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_time.setFont(font)
        self.label_time.setAlignment(QtCore.Qt.AlignCenter)
        self.label_time.setObjectName("label_time")
        self.horizontalLayout.addWidget(self.label_time)
        self.label_date = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_date.setFont(font)
        self.label_date.setAlignment(QtCore.Qt.AlignCenter)
        self.label_date.setObjectName("label_date")
        self.horizontalLayout.addWidget(self.label_date)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.open_fils = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.open_fils.setObjectName("open_fils")
        self.open_fils.setEnabled(False)
        self.open_fils.clicked.connect(self.openFile)
        self.horizontalLayout_2.addWidget(self.open_fils)
        self.update = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.update.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.update.setObjectName("update")
        self.update.clicked.connect(self.upDateData)
        self.horizontalLayout_2.addWidget(self.update)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 290, 381, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setTextFormat(QtCore.Qt.AutoText)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def upDateData(self):
        self.first=False
        self.started=True
        self.open_fils.setEnabled(False)
        self.statusbar.showMessage("updating started",10000)
        time1=datetime.now()
        self.new_data=scrapData()
        time2=datetime.now()
        print("dowloading data takes ",time2-time1)
        self.statusbar.showMessage("data Gotten succefully",5000)
        time1=datetime.now()
        self.new_data.transformData()
        time2=datetime.now()
        print("transforming data takes ",time2-time1)
        self.statusbar.showMessage("data Transformed succefully",5000)
        time1=datetime.now()
        self.new_data.commitData()
        time2=datetime.now()
        print("saving data takes ",time2-time1)
        self.statusbar.showMessage("data saved succefully",5000)
        self.open_fils.setEnabled(True)
        self.label_date.setText(self.new_data.modification_date)
        self.label_time.setText(self.new_data.modification_time)
        self.started=False
    def openFile(self):
        
        if self.first_file and self.first:
            os.system('start excel.exe "'+self.first_file+'.xlsx"')
            return
        if self.started:
            return
        os.system('start excel.exe "'+self.new_data.file_name+'.xlsx"')
    def change_display(self,data={}):
        if not data:
            self.label_time.setText(self.new_data.modification_time)
            self.label_date.setText(self.new_data.modification_date)  
        else:
            self.label_time.setText(data["time"])
            self.label_date.setText(data["date"])  

    def existing_data(self):
        try:
            with open("Conf/historic.conf","r") as f:
                his=f.readlines()
        except:
            open("Conf/historic.conf","w")
            his=[]
        if len(his)==0:
            return
        last_data=his[-1].split('*')
        last_update={}
        last_update["date"]=last_data[0]
        last_update["time"]=last_data[1]
        last_update["file_name"]=last_data[2].replace('\n','')
        self.change_display(last_update)
        if os.path.exists(last_update["file_name"]+".xlsx"):
            self.first_file=last_update["file_name"]
            self.first=True
            self.open_fils.setEnabled(True)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ICP-Brazil"))
        # self.label.setText(_translate("MainWindow", "<html><head/><body><img src=\":/newPrefix/loading-buffering.gif\" width=\"60\" height=\"60\"/></body></html>"))
        self.file_name.setText(_translate("MainWindow", "last Update excuted"))
        self.label_time.setText(_translate("MainWindow", "time"))
        self.label_date.setText(_translate("MainWindow", "date"))
        self.open_fils.setText(_translate("MainWindow", "Open File"))
        self.update.setText(_translate("MainWindow", "Get New Data"))
        self.label_4.setText(_translate("MainWindow", "khalil ltrs / 2021"))











import requests
from pandas import DataFrame
class scrapData():
    def __init__(self):

        try:   
            STFile=requests.get("https://estrutura.iti.gov.br/assets/structure.json", timeout=100,verify=False)
            detailsFile=requests.get("https://estrutura.iti.gov.br/assets/details.json", timeout=100,verify=False)
        except Exception as e:
            pass
        self.structure=STFile.json()
        self.data=detailsFile.json()
        
    def transformData(self):
        self.modification_date=self.data["atualizado_data"]
        self.modification_time=self.data["atualizado_hora"]
        self.data=self.data["entidades"]
        self.df=DataFrame()
        temp={"AC1":" ","AC2":" "}
        for x in self.structure["entidades_vinculadas"]:
            temp["AC1"]=x["nome"]
            self.recFunction(x,temp)
    def getDetails(self,temp,pid):
        item=[x for x in self.data if x["id"] == pid][0]
        cnpj=item["cnpj"]
        cnpj=cnpj[0:2]+'.'+cnpj[2:5]+'.'+cnpj[5:8]+'/'+cnpj[9:12]+'-'+cnpj[12:]
        temp["CNPG"]=cnpj
        try:
            temp["Telefone"]=item["telefone"]
        except Exception as e:
            temp["Telefone"]=" "
        try:
            temp["Municipio"]=item["enderecos"][0]["cidade"]
        except Exception as e:
            temp["Municipio"]=" "
        try:
            temp["UF"]=item["enderecos"][0]["uf"]
        except Exception as e:
            temp["UF"]=" "
        temp["Situacao"]="Credenciado" if item["situacao"] == 4002 else "Em Credenciamento"
        return temp
    def recFunction(self,item,temp,i=1):
        if item["entidade"]=="AR":
            if i==2:
                temp["AC2"]=" "
            temp["AR"]=item["nome"]
            temp=self.getDetails(temp,item["id"])
            self.df=self.df.append(temp,ignore_index=True)
            temp={"AC1":"null","AC2":"null"}
        elif "entidades_vinculadas" not in item.keys() :
            return 
        else:
            for x in item["entidades_vinculadas"]:
                aux=x["tipo"].replace('-','').upper()
                temp[aux]=x["nome"]
                self.recFunction(x,temp,i+1)
    def commitData(self,file_name=""):
        self.file_name="ICP Brazil"+self.modification_date.replace('/',' ')+"-"+self.modification_time.replace(':',' ')
        self.df.to_excel(self.file_name+".xlsx",index=False)
        with open("Conf/historic.conf","a") as f:
            f.write(self.modification_date+"*")
            f.write(self.modification_time+"*")
            f.write(self.file_name+"\n")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.existing_data()
    sys.exit(app.exec_())
